/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kfirfer.userservice.api;

import com.kfirfer.userservice.model.ModelApiResponse;
import com.kfirfer.userservice.model.Pet;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-06T14:41:19.244306+03:00[Asia/Jerusalem]")

@Validated
@Tag(name = "pet", description = "the Pet API")
public interface PetApi {

    @Operation(summary = "Add a new pet to the store", operationId = "addPet", description = "Add a new pet to the store", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "Successful operation"),
            @ApiResponse(responseCode = "405", headers = {
            }
                    , description = "Invalid input", content = @Content)})
    @RequestMapping(value = "/pet",
            produces = {"application/xml", "application/json"},
            consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Pet> addPet(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Create a new pet in the store", required = true) @Valid @RequestBody Pet pet);


    @Operation(summary = "Deletes a pet", operationId = "deletePet", description = "", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid pet value", content = @Content)})
    @RequestMapping(value = "/pet/{petId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePet(@Parameter(description = "Pet id to delete", required = true) @PathVariable("petId") Long petId, @Parameter(description = "") @RequestHeader(value = "api_key", required = false) String apiKey);


    @Operation(summary = "Finds Pets by status", operationId = "findPetsByStatus", description = "Multiple status values can be provided with comma separated strings", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid status value", content = @Content)})
    @RequestMapping(value = "/pet/findByStatus",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Pet>> findPetsByStatus(@Parameter(description = "Status values that need to be considered for filter", schema = @Schema(allowableValues = {"available", "pending", "sold"}, defaultValue = "available")) @Valid @RequestParam(value = "status", required = false, defaultValue = "available") String status);


    @Operation(summary = "Finds Pets by tags", operationId = "findPetsByTags", description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid tag value", content = @Content)})
    @RequestMapping(value = "/pet/findByTags",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Pet>> findPetsByTags(@Parameter(description = "Tags to filter by") @Valid @RequestParam(value = "tags", required = false) List<String> tags);


    @Operation(summary = "Find pet by ID", operationId = "getPetById", description = "Returns a single pet", security = {
            @SecurityRequirement(name = "api_key"),
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid ID supplied", content = @Content),
            @ApiResponse(responseCode = "404", headers = {
            }
                    , description = "Pet not found", content = @Content)})
    @RequestMapping(value = "/pet/{petId}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Pet> getPetById(@Parameter(description = "ID of pet to return", required = true) @PathVariable("petId") Long petId);


    @Operation(summary = "Update an existing pet", operationId = "updatePet", description = "Update an existing pet by Id", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "Successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid ID supplied", content = @Content),
            @ApiResponse(responseCode = "404", headers = {
            }
                    , description = "Pet not found", content = @Content),
            @ApiResponse(responseCode = "405", headers = {
            }
                    , description = "Validation exception", content = @Content)})
    @RequestMapping(value = "/pet",
            produces = {"application/xml", "application/json"},
            consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"},
            method = RequestMethod.PUT)
    ResponseEntity<Pet> updatePet(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Update an existent pet in the store", required = true) @Valid @RequestBody Pet pet);


    @Operation(summary = "Updates a pet in the store with form data", operationId = "updatePetWithForm", description = "", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "405", headers = {
            }
                    , description = "Invalid input", content = @Content)})
    @RequestMapping(value = "/pet/{petId}",
            method = RequestMethod.POST)
    ResponseEntity<Void> updatePetWithForm(@Parameter(description = "ID of pet that needs to be updated", required = true) @PathVariable("petId") Long petId, @Parameter(description = "Name of pet that needs to be updated") @Valid @RequestParam(value = "name", required = false) String name, @Parameter(description = "Status of pet that needs to be updated") @Valid @RequestParam(value = "status", required = false) String status);


    @Operation(summary = "uploads an image", operationId = "uploadFile", description = "", security = {
            @SecurityRequirement(name = "petstore_auth", scopes = {
                    "write:pets",
                    "read:pets"
            })
    }, tags = {"pet",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation")})
    @RequestMapping(value = "/pet/{petId}/uploadImage",
            produces = {"application/json"},
            consumes = {"application/octet-stream"},
            method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadFile(@Parameter(description = "ID of pet to update", required = true) @PathVariable("petId") Long petId, @Parameter(description = "Additional Metadata") @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata, @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "") @Valid @RequestBody Resource body);

}
