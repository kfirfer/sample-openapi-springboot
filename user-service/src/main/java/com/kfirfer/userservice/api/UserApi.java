/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.kfirfer.userservice.api;

import com.kfirfer.userservice.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-14T21:25:24.942975+03:00[Asia/Jerusalem]")

@Validated
@Tag(name = "user", description = "the User API")
public interface UserApi {

    @Operation(summary = "Create user", operationId = "createUser", description = "This can only be done by the logged in user.", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation")})
    @RequestMapping(value = "/user",
            produces = {"application/json", "application/xml"},
            consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<User> createUser(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Created user object") @Valid @RequestBody User user);


    @Operation(summary = "Creates list of users with given input array", operationId = "createUsersWithListInput", description = "Creates list of users with given input array", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "Successful operation"),
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation", content = @Content)})
    @RequestMapping(value = "/user/createWithList",
            produces = {"application/xml", "application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<User> createUsersWithListInput(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "") @Valid @RequestBody List<User> user);


    @Operation(summary = "Delete user", operationId = "deleteUser", description = "This can only be done by the logged in user.", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid username supplied", content = @Content),
            @ApiResponse(responseCode = "404", headers = {
            }
                    , description = "User not found", content = @Content)})
    @RequestMapping(value = "/user/{username}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(description = "The name that needs to be deleted", required = true) @PathVariable("username") String username);


    @Operation(summary = "Get user by user name", operationId = "getUserByName", description = "", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid username supplied", content = @Content),
            @ApiResponse(responseCode = "404", headers = {
            }
                    , description = "User not found", content = @Content)})
    @RequestMapping(value = "/user/{username}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<User> getUserByName(@Parameter(description = "The name that needs to be fetched. Use user1 for testing. ", required = true) @PathVariable("username") String username);


    @Operation(summary = "Logs user into the system", operationId = "loginUser", description = "", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
                    @Header(name = "X-Rate-Limit", description = "calls per hour allowed by the user", schema = @Schema(type = "integer", format = "int32")),
                    @Header(name = "X-Expires-After", description = "date in UTC when toekn expires", schema = @Schema(type = "string", format = "date-time")),
            }
                    , description = "successful operation"),
            @ApiResponse(responseCode = "400", headers = {
            }
                    , description = "Invalid username/password supplied", content = @Content)})
    @RequestMapping(value = "/user/login",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<String> loginUser(@Parameter(description = "The user name for login") @Valid @RequestParam(value = "username", required = false) String username, @Parameter(description = "The password for login in clear text") @Valid @RequestParam(value = "password", required = false) String password);


    @Operation(summary = "Logs out current logged in user session", operationId = "logoutUser", description = "", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation", content = @Content)})
    @RequestMapping(value = "/user/logout",
            method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();


    @Operation(summary = "Update user", operationId = "updateUser", description = "This can only be done by the logged in user.", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", headers = {
            }
                    , description = "successful operation", content = @Content)})
    @RequestMapping(value = "/user/{username}",
            consumes = {"application/json", "application/xml", "application/x-www-form-urlencoded"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(description = "name that need to be deleted", required = true) @PathVariable("username") String username, @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Update an existent user in the store") @Valid @RequestBody User user);

}
