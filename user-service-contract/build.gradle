buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("io.swagger:swagger-codegen:2.4.8")
    }
}

apply plugin: 'base'

group = 'com.kfirfer'

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'com.kfirfer'
    version = '0.0.2'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.fork = true

    project.buildDir = "${rootProject.buildDir}/${project.name}"
    sourceSets {
        main {
            java {
                srcDir "${project.buildDir}/src/main/java"
            }
        }
    }

    // This is just for generating the source jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
}

ext.appName = 'user-service'
ext.apiPackage = 'com.kfirfer.userservice.api'
ext.modelPackage = 'com.kfirfer.userservice.model'
ext.swaggerFile = "${rootDir}/api/swagger.yml"


project("${rootProject.appName}-server") { // user-service-server
    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-web:2.1.8.RELEASE')
        implementation('io.springfox:springfox-swagger2:2.9.2')
    }

    task generateServer {
        doLast {
            def config = new CodegenConfigurator()
            config.setLang("spring")
            config.setLibrary("spring-boot")
            config.setApiPackage(rootProject.apiPackage)            // Package to be used for the API interfaces
            config.setModelPackage(rootProject.modelPackage)        // Package to be used for the API models
            config.setInputSpec(rootProject.swaggerFile.toString()) // The swagger API file
            config.setOutputDir(project.buildDir.toString())
            config.setAdditionalProperties([
                    'dateLibrary'  : 'java8', // Date library to use
                    'useTags'      : 'true',  // Use tags for the naming
                    'java8'      : 'true',
                    'async'      : 'true',
                    'delegatePattern'      : 'false',
                    'useBeanValidation'      : 'true',
                    'interfaceOnly': 'true'   // Generating the Controller API interface and the models only
            ])
            new DefaultGenerator().opts(config.toClientOptInput()).generate() // Executing the generation
        }
    }

    compileJava.dependsOn('generateServer')
}
